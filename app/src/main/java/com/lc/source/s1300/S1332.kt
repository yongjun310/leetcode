import com.lc.source.s1100.S1160
import java.lang.StringBuilder
import java.util.*
import kotlin.collections.ArrayList
import kotlin.collections.HashMap
import kotlin.collections.HashSet

/*
1332. Remove Palindromic Subsequences
Easy

237

484

Add to List

Share
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0


Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
Accepted
15,415
Submissions
24,692
*/
class S1332{
    fun removePalindromeSub(s: String): Int {
        var start = 0
        var end = s.length - 1
        if(s.isEmpty()) {
            return 0
        }
        var isPal = true
        while (start <= end) {
            if (s[start] != s[end]) {
                isPal = false
                break
            } else {
                start++
                end--
            }
        }
        return if(isPal) {
            1
        } else {
            2
        }
    }

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            print(S1332().removePalindromeSub("abbaaaab"))
        }
    }
}
