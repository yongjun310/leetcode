Index: app/src/main/java/com/lc/source/s1/S4.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/lc/source/s1/S4.kt	(date 1611813203000)
+++ app/src/main/java/com/lc/source/s1/S4.kt	(date 1611813203000)
@@ -0,0 +1,73 @@
+package com.lc.source.s1
+
+import kotlin.collections.ArrayList
+
+/*
+4. Median of Two Sorted Arrays
+Hard
+
+9031
+
+1389
+
+Add to List
+
+Share
+Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
+
+Follow up: The overall run time complexity should be O(log (m+n)).
+
+
+
+Example 1:
+
+Input: nums1 = [1,3], nums2 = [2]
+Output: 2.00000
+Explanation: merged array = [1,2,3] and median is 2.
+Example 2:
+
+Input: nums1 = [1,2], nums2 = [3,4]
+Output: 2.50000
+Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
+Example 3:
+
+Input: nums1 = [0,0], nums2 = [0,0]
+Output: 0.00000
+Example 4:
+
+Input: nums1 = [], nums2 = [1]
+Output: 1.00000
+Example 5:
+
+Input: nums1 = [2], nums2 = []
+Output: 2.00000
+
+
+Constraints:
+
+nums1.length == m
+nums2.length == n
+0 <= m <= 1000
+0 <= n <= 1000
+1 <= m + n <= 2000
+-106 <= nums1[i], nums2[i] <= 106
+Accepted
+844,521
+Submissions
+2,736,145
+ */
+
+class S4{
+    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {
+        var n1size = nums1.size
+        var n2size = nums2.size
+        var mid = (n1size+n2size)/2
+    }
+
+    companion object{
+        @JvmStatic
+        fun main(args: Array<String>) {
+            print(S4().threeSum(intArrayOf(-4,-2,-2,-2,0,1,2,2,2,3,3,4,4,6,6)))
+        }
+    }
+}
\ No newline at end of file
